// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var MomentRe = require("bs-moment/src/MomentRe.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_splice_call = require("bs-platform/lib/js/caml_splice_call.js");
var Date$DoctolibKnex = require("./Date.bs.js");
var Sqlite3$DoctolibKnex = require("./Sqlite3.bs.js");

function dayToJs(param) {
  return param;
}

function is(day, date) {
  return date.getDay() === day;
}

function isWeekend(date) {
  if (is(/* Saturday */6, date)) {
    return true;
  } else {
    return is(/* Sunday */0, date);
  }
}

function isSunday(date) {
  return is(/* Sunday */0, date);
}

function isSaturday(date) {
  return is(/* Saturday */6, date);
}

function isWithinInterval(interval, date) {
  var ts = Date$DoctolibKnex.copy(date).getTime();
  if (ts >= Date$DoctolibKnex.copy(interval.start).getTime()) {
    return ts <= Date$DoctolibKnex.copy(interval.end_).getTime();
  } else {
    return false;
  }
}

function makeInterval(start, end_) {
  return {
          start: start,
          end_: end_
        };
}

function decodeEvent(r) {
  console.log(r);
  var event_starts = new Date(r.starts_at);
  var event_ends = new Date(r.ends_at);
  var event_weekly_recurring = r.weekly_recurring;
  var $$event = {
    starts: event_starts,
    ends: event_ends,
    weekly_recurring: event_weekly_recurring
  };
  console.log("event", $$event);
  return $$event;
}

function makeYMD(date) {
  return new Date(date.getFullYear(), date.getMonth(), date.getDate());
}

function makeResult(r, date) {
  isWeekend(date);
  var rangeStartDateIsWE = is(/* Sunday */0, date);
  Date$DoctolibKnex.addDays(date, 7);
  var rangeStart = Date$DoctolibKnex.addDays(date, -1);
  console.log("rangeStartDateIsWE", rangeStartDateIsWE);
  console.log("rangeStartDateIsWE", date.getDay());
  var opening = decodeEvent(r);
  var arrayInitNextWeek = function (date) {
    return $$Array.init(7, (function (index) {
                  var __x = index + 1 | 0;
                  var date$1 = Date$DoctolibKnex.addDays(date, __x);
                  return {
                          date: date$1,
                          slots: []
                        };
                }));
  };
  var availabilities = arrayInitNextWeek(rangeStart);
  var checkWeekend = Belt_Array.map(availabilities, (function (a) {
          return isWeekend(a.date);
        }));
  console.log("checkWeekend", checkWeekend);
  var starts = opening.starts;
  var weekRangeEnd = Date$DoctolibKnex.addDays(starts, 7);
  var weekInterval_start = makeYMD(starts);
  var weekInterval = {
    start: weekInterval_start,
    end_: weekRangeEnd
  };
  console.log("weekInterval_start", weekInterval_start);
  console.log("weekInterval_end", weekRangeEnd);
  console.log("weekInterval_end", weekRangeEnd);
  console.log("weekInterval", weekInterval);
  var generateSlots = function ($$event) {
    var formattedSlots = [];
    var starts = $$event.starts;
    var slotInterval_end_ = $$event.ends;
    var slotInterval = {
      start: starts,
      end_: slotInterval_end_
    };
    var slot = function (date) {
      if (isWithinInterval(slotInterval, date)) {
        var starts = Date$DoctolibKnex.addMinutes(date, 30);
        var hours = starts.toString();
        var formattedSlot = MomentRe.moment(undefined, hours).format("h:mm");
        formattedSlots.push(formattedSlot);
        var __x = Date$DoctolibKnex.copy(date);
        slot(Date$DoctolibKnex.addMinutes(__x, 30));
        return /* () */0;
      } else {
        return /* () */0;
      }
    };
    slot(starts);
    return formattedSlots;
  };
  if (opening.weekly_recurring) {
    console.log(true);
    var newSlots = generateSlots(opening);
    console.log(newSlots);
    Belt_Array.map(availabilities, (function (a) {
            var isSaturday = is(/* Saturday */6, a.date);
            var isInInterval = isWithinInterval(weekInterval, a.date);
            console.log("isInInterval", isInInterval);
            if (isSaturday || !isInInterval) {
              return 0;
            } else {
              return Caml_splice_call.spliceObjApply(a.slots, "push", [newSlots]);
            }
          }));
  }
  return availabilities;
}

var db = Sqlite3$DoctolibKnex.Database.make("db.sqlite", undefined, undefined, (function (prim) {
        console.log(prim);
        return /* () */0;
      }), true, /* () */0);

function getAvailabilities(date) {
  console.log("getdate", date);
  console.log("getdate", date.getDay());
  var data2 = db.prepare("SELECT * FROM events").all();
  console.log("getdata2", data2);
  var data = db.prepare("SELECT * FROM events WHERE kind = 'opening'").get();
  console.log("getdata", data);
  var availabilities = makeResult(data, date);
  console.log("get_availabilities_result", availabilities);
  return availabilities;
}

var date = new Date("2014-08-10");

getAvailabilities(date);

exports.dayToJs = dayToJs;
exports.is = is;
exports.isWeekend = isWeekend;
exports.isSunday = isSunday;
exports.isSaturday = isSaturday;
exports.isWithinInterval = isWithinInterval;
exports.makeInterval = makeInterval;
exports.decodeEvent = decodeEvent;
exports.makeYMD = makeYMD;
exports.makeResult = makeResult;
exports.db = db;
exports.getAvailabilities = getAvailabilities;
exports.date = date;
/* db Not a pure module */
